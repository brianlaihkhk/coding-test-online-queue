service: order

custom:
  stage: ${self:provider.stage}
  env: ${file(../resources/env-${self:provider.stage}.yml)}
  encrypt: ${file(../resources/encrypt-${self:provider.stage}.yml)}
  pythonRequirements:
    dockerizePip: true
  prune:
    automatic: true
    includeLayers: true
    number: 3
#  scriptHooks:
#    after:package:cleanup:
#      - pip3 install -I -t build/ -r package.txt

#* Create an optimized package for our functions
package: 
  individually: true

provider:
  name: aws
  runtime: python3.8
  stage: prd
  region: ap-southeast-1

plugins:
  - serverless-python-requirements
  - serverless-scriptable-plugin
  - serverless-prune-plugin

iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "lambda:*"
      - "apigateway:GET"
      - "apigateway:PATCH"
      - "apigateway:POST"
      - "apigateway:PUT"
      - "apigateway:DELETE"
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
    Resource: "*"

functions:
  ping:
    name: order-ping-${self:provider.stage}
    handler: ping.ping
    package: {}
    events:
    -
      http:
        path: ping
        method: GET
        cors: true
        private: false

  order:
    name: order-order-${self:provider.stage}
    handler: order.purchase
    timeout: 30
    package: {}
    events:
    -
      http:
        path: order
        method: POST
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - Session
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
        private: false
    environment:
      RDS_HOST: ${self:custom.env.RDS_HOST}
      RDS_USERNAME: ${self:custom.env.RDS_ORDER_USERNAME}
      RDS_PASSWORD: ${self:custom.env.RDS_ORDER_PASSWORD}
      RDS_DEFAULT_DB:  ${self:custom.env.RDS_DEFAULT_DB}
      RDS_ENCRYPT_KEY:  ${self:custom.encrypt.RDS_ENCRYPT_KEY}
      SESSION_EXPIRATION_MINUTE :  ${self:custom.env.SESSION_EXPIRATION_MINUTE}
      CONCURRENT_MAXIMUM_USERS : ${self:custom.env.CONCURRENT_MAXIMUM_USERS}
    vpc:
      securityGroupIds:
      - ${self:custom.env.VPC_SECURITY_GROUP}
      subnetIds:
      - ${self:custom.env.VPC_SUBNET_A}
      - ${self:custom.env.VPC_SUBNET_B}
      - ${self:custom.env.VPC_SUBNET_C}

  status:
    name: order-status-${self:provider.stage}
    handler: status.queue_status
    timeout: 30
    package: {}
    events:
    -
      http:
        path: status
        method: GET
        cors:
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - Session
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
        private: false
    environment:
      RDS_HOST: ${self:custom.env.RDS_HOST}
      RDS_USERNAME: ${self:custom.env.RDS_SESSION_USERNAME}
      RDS_PASSWORD: ${self:custom.env.RDS_SESSION_PASSWORD}
      RDS_DEFAULT_DB:  ${self:custom.env.RDS_DEFAULT_DB}
      RDS_ENCRYPT_KEY:  ${self:custom.encrypt.RDS_ENCRYPT_KEY}
      SESSION_EXPIRATION_MINUTE :  ${self:custom.env.SESSION_EXPIRATION_MINUTE}
      CONCURRENT_MAXIMUM_USERS : ${self:custom.env.CONCURRENT_MAXIMUM_USERS}
    vpc:
      securityGroupIds:
      - ${self:custom.env.VPC_SECURITY_GROUP}
      subnetIds:
      - ${self:custom.env.VPC_SUBNET_A}
      - ${self:custom.env.VPC_SUBNET_B}
      - ${self:custom.env.VPC_SUBNET_C}

  session:
    name: order-session-${self:provider.stage}
    handler: session.new
    timeout: 30
    package: {}
    events:
    -
      http:
        path: session
        method: GET
        cors: true
        private: false      
    environment:
      RDS_HOST: ${self:custom.env.RDS_HOST}
      RDS_USERNAME: ${self:custom.env.RDS_SESSION_USERNAME}
      RDS_PASSWORD: ${self:custom.env.RDS_SESSION_PASSWORD}
      RDS_DEFAULT_DB:  ${self:custom.env.RDS_DEFAULT_DB}
      RDS_ENCRYPT_KEY:  ${self:custom.encrypt.RDS_ENCRYPT_KEY}
      SESSION_EXPIRATION_MINUTE :  ${self:custom.env.SESSION_EXPIRATION_MINUTE}
      CONCURRENT_MAXIMUM_USERS : ${self:custom.env.CONCURRENT_MAXIMUM_USERS}
    vpc:
      securityGroupIds:
      - ${self:custom.env.VPC_SECURITY_GROUP}
      subnetIds:
      - ${self:custom.env.VPC_SUBNET_A}
      - ${self:custom.env.VPC_SUBNET_B}
      - ${self:custom.env.VPC_SUBNET_C}


  populate:
    name: order-populate-${self:provider.stage}
    handler: session.populate_session
    timeout: 30
    package: {}
    events:
    -
      http:
        path: populate
        method: GET
        cors: true
        private: false      
    environment:
      RDS_HOST: ${self:custom.env.RDS_HOST}
      RDS_USERNAME: ${self:custom.env.RDS_SESSION_USERNAME}
      RDS_PASSWORD: ${self:custom.env.RDS_SESSION_PASSWORD}
      RDS_DEFAULT_DB:  ${self:custom.env.RDS_DEFAULT_DB}
      RDS_ENCRYPT_KEY:  ${self:custom.encrypt.RDS_ENCRYPT_KEY}
      SESSION_EXPIRATION_MINUTE :  ${self:custom.env.SESSION_EXPIRATION_MINUTE}
      CONCURRENT_MAXIMUM_USERS : ${self:custom.env.CONCURRENT_MAXIMUM_USERS}
    vpc:
      securityGroupIds:
      - ${self:custom.env.VPC_SECURITY_GROUP}
      subnetIds:
      - ${self:custom.env.VPC_SUBNET_A}
      - ${self:custom.env.VPC_SUBNET_B}
      - ${self:custom.env.VPC_SUBNET_C}

  item:
    name: order-item-${self:provider.stage}
    handler: item.list
    timeout: 30
    package: {}
    events:
    -
      http:
        path: item
        method: GET
        cors: true
        private: false      
    environment:
      RDS_HOST: ${self:custom.env.RDS_HOST}
      RDS_USERNAME: ${self:custom.env.RDS_SESSION_USERNAME}
      RDS_PASSWORD: ${self:custom.env.RDS_SESSION_PASSWORD}
      RDS_DEFAULT_DB:  ${self:custom.env.RDS_DEFAULT_DB}
      RDS_ENCRYPT_KEY:  ${self:custom.encrypt.RDS_ENCRYPT_KEY}
      SESSION_EXPIRATION_MINUTE :  ${self:custom.env.SESSION_EXPIRATION_MINUTE}
      CONCURRENT_MAXIMUM_USERS : ${self:custom.env.CONCURRENT_MAXIMUM_USERS}
    vpc:
      securityGroupIds:
      - ${self:custom.env.VPC_SECURITY_GROUP}
      subnetIds:
      - ${self:custom.env.VPC_SUBNET_A}
      - ${self:custom.env.VPC_SUBNET_B}
      - ${self:custom.env.VPC_SUBNET_C}